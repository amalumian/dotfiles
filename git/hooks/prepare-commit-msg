#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');

const commitMsgFile = process.argv[2];
const commitSource = process.argv[3];

if (commitSource === 'message') {
  process.exit(0);
}

try {
  const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
  const stagedFiles = gitStatus
    .split('\n')
    .filter(line => line.match(/^[AMD]/))
    .map(line => ({
      status: line.substring(0, 2),
      filename: line.substring(3)
    }));

  if (stagedFiles.length === 0) {
    process.exit(0);
  }

  const modifiedFiles = [];
  const newFiles = [];
  const deletedFiles = [];

  stagedFiles.forEach(({ status, filename }) => {
    if (status === 'M ' || status === 'MM') {
      modifiedFiles.push(filename);
    } else if (status === 'A ' || status === 'AM') {
      newFiles.push(filename);
    } else if (status === 'D ' || status === 'DM') {
      deletedFiles.push(filename);
    }
  });

  const limitFileList = (files) => {
    if (files.length > 5) {
      return `${files.slice(0, 5).join(', ')}... and ${files.length - 5} more files`;
    }
    return files.join(', ');
  };

  const commitParts = [];

  if (modifiedFiles.length > 0) {
    commitParts.push(`Modify ${limitFileList(modifiedFiles)}`);
  }

  if (newFiles.length > 0) {
    commitParts.push(`Add ${limitFileList(newFiles)}`);
  }

  if (deletedFiles.length > 0) {
    commitParts.push(`Delete ${limitFileList(deletedFiles)}`);
  }

  const commitMessage = commitParts.join('; ');
  fs.writeFileSync(commitMsgFile, commitMessage);

} catch (error) {
  process.exit(0);
}
