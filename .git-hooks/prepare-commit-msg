#!/usr/bin/env node

const { execSync } = require("child_process");
const fs = require("fs");

const commitMsgFile = process.argv[2];
const commitSource = process.argv[3];

if (commitSource === "message") {
  process.exit(0);
}

try {
  const gitStatus = execSync("git status --porcelain", { encoding: "utf8" });
  const stagedFiles = gitStatus
    .split("\n")
    .filter((line) => line.match(/^[AMDR]/))
    .map((line) => ({
      status: line.substring(0, 2),
      filename: line.substring(3),
    }));

  if (stagedFiles.length === 0) {
    process.exit(0);
  }

  const newFiles = [];
  const modifiedFiles = [];
  const renamedFiles = [];
  const deletedFiles = [];

  stagedFiles.forEach(({ status, filename }) => {
    if (status === "A " || status === "AM") {
      newFiles.push(filename);
    } else if (status === "M " || status === "MM") {
      modifiedFiles.push(filename);
    } else if (status === "R " || status === "RM") {
      renamedFiles.push(filename);
    } else if (status === "D " || status === "DM") {
      deletedFiles.push(filename);
    }
  });

  const getAllPaths = (files) => {
    const skipDirectories = [
      "amalumian",
      ".config",
      ".local",
      "Library",
      "Application Support",
    ];
    return [
      ...new Set(
        files.map((file) => {
          const parts = file.split("/");
          for (let i = 0; i < parts.length; i++) {
            if (!skipDirectories.includes(parts[i])) {
              return parts[i];
            }
          }
          return parts[parts.length - 1];
        }),
      ),
    ];
  };

  const allNewPaths = getAllPaths(newFiles);
  const allModifiedPaths = getAllPaths(modifiedFiles);
  const allRenamedPaths = getAllPaths(renamedFiles);
  const allDeletedPaths = getAllPaths(deletedFiles);
  const firstLineParts = [];

  if (allNewPaths.length > 0) {
    firstLineParts.push(`Add to ${allNewPaths.join(", ")}`);
  }

  if (allModifiedPaths.length > 0) {
    firstLineParts.push(`Modify in ${allModifiedPaths.join(", ")}`);
  }

  if (allRenamedPaths.length > 0) {
    firstLineParts.push(`Rename in ${allRenamedPaths.join(", ")}`);
  }

  if (allDeletedPaths.length > 0) {
    firstLineParts.push(`Delete from ${allDeletedPaths.join(", ")}`);
  }

  const firstLine = firstLineParts.join("; ");
  const descriptionParts = [];

  if (newFiles.length > 0) {
    descriptionParts.push(`Added:`);
    newFiles.forEach((file) => descriptionParts.push(`  - ${file}`));
    descriptionParts.push("");
  }

  if (modifiedFiles.length > 0) {
    descriptionParts.push(`Modified:`);
    modifiedFiles.forEach((file) => descriptionParts.push(`  - ${file}`));
    descriptionParts.push("");
  }

  if (renamedFiles.length > 0) {
    descriptionParts.push(`Renamed:`);
    renamedFiles.forEach((file) => descriptionParts.push(`  - ${file}`));
    descriptionParts.push("");
  }

  if (deletedFiles.length > 0) {
    descriptionParts.push(`Deleted:`);
    deletedFiles.forEach((file) => descriptionParts.push(`  - ${file}`));
    descriptionParts.push("");
  }

  const description = descriptionParts.join("\n");
  const commitMessage = firstLine + (description ? "\n\n" + description : "");

  fs.writeFileSync(commitMsgFile, commitMessage);
} catch (error) {
  process.exit(0);
}
